# -- RNG map
def mapCreateTest():
    x = 0
    y = 0
    randomNum = random.randint(1, 2)
    randomNum = 1
    if randomNum == 1:
        x = x + 1280
        for row in blankMap:
            for col in row:
                if col == 1:
                    w = Wall(BLUE, 40, 40, x, y)
                    all_sprites_list.add(w)
                    wall_group.add(w)
                x = x + 40
            x = 0
            x = x + 1280
            y = y + 40
    if randomNum == 1:
        x = 0
        y = 0
        y = y + 720
        for row in blankMap:
            for col in row:
                if col == 1:
                    w = Wall(GREEN, 40, 40, x, y)
                    all_sprites_list.add(w)
                    wall_group.add(w)
                x = x + 40
            x = 0
            y = y + 40
    if randomNum == 1:
        x = 0
        y = 0
        x = x - 1280
        for row in blankMap:
            for col in row:
                if col == 1:
                    w = Wall(YELLOW, 40, 40, x, y)
                    all_sprites_list.add(w)
                    wall_group.add(w)
                x = x + 40
            x = 0
            x = x - 1280
            y = y + 40
    if randomNum == 1:
        x = 0
        y = 0
        y = y - 720
        for row in blankMap:
            for col in row:
                if col == 1:
                    w = Wall(WHITE, 40, 40, x, y)
                    all_sprites_list.add(w)
                    wall_group.add(w)
                x = x + 40
            x = 0
            y = y + 40
#mapCreateTest()

# CAMERA WORK
class Camera:
    def __init__(self,width, height):
        self.camera = pygame.Rect(0, 0, width, height)
        self.width = width
        self.height = height
    
    def apply(self, entity):
        return entity.rect.move(self.camera.topleft)
    
    def update(self, target):
        x = -target.rect.x + int(1280 / 2) 
        y = -target.rect.y + int(720 /2)
        self.camera = pygame.Rect(x, y, self.width, self.height)

class Camera2:
    def __init__(self, player):
        self.player = player
        self.offset = pygame.math.Vector2(0, 0)
        self.offset_float = pygame.math.Vector2(0, 0)

    def setmethod(self, method):
        self.method = method
    
class CamScroll():
    pass

# CAMERA
#c = Camera(1280, 720)
#c.update(player)
#screen.blit(c.apply(player))

def closeDoor():
    print(mapGrid)
    numberOfRooms = 0
    for row in mapGrid:
        for col in row:
            if col == 1:
                numberOfRooms += 1
    while numberOfRooms != level1rooms + 1:
        for row in mapGrid:
            for col in row:
                if col == 1:
                    col = 0
        for foo in wall_group:
            foo.delete()
        mapCreate()
#closeDoor()

def closeDoor2():
    print(mapGrid)
    roomnumber = 0
    for row in mapGrid:
        for col in row:
            if col == 1 or col == 2:
                roomnumber += 1
    if roomnumber != level1rooms:
        for foo in wall_group:
            foo.delete()
#closeDoor2()

        if randomNum == 1:
            y = y - 720
            originaly += 1
            mapGrid[originalx][originaly] = 1
        if randomNum == 2:
            y = y - 720
            originaly -= 1
            mapGrid[originalx][originaly] = 1
        if randomNum == 3:
            y = y - 720
            originalx -= 1
            mapGrid[originalx][originaly] = 1
        if randomNum == 4:
            y = y - 720
            originalx += 1
            mapGrid[originalx][originaly] = 1  

# OVERLAPPING TEST (BUGGED)
        if randomNum == 1:
            if mapGrid[originalx][originaly + 1] == 1:
                while randomNum == 1:
                    randomNum = random.randint(1, 4)   
                if randomNum == 2:
                    if mapGrid[originalx][originaly - 1] == 1:
                        randomNum = random.choice([3, 4])
                        if randomNum == 3:
                            if mapGrid[originalx - 1][originaly] == 1:
                                randomNum = 4
                        if randomNum == 4:
                            if mapGrid[originalx + 1][originaly] == 1:
                                randomNum = 3

        if randomNum == 2:
            if mapGrid[originalx][originaly - 1] == 1:
                while randomNum == 2:
                    randomNum = random.randint(1, 4)
                if randomNum == 1:
                    if mapGrid[originalx][originaly + 1] == 1:
                        randomNum = random.choice([3, 4])
                        if randomNum == 3:
                            if mapGrid[originalx - 1][originaly] == 1:
                                randomNum = 4
                        if randomNum == 4:
                            if mapGrid[originalx + 1][originaly] == 1:
                                randomNum = 3

        if randomNum == 3:
            if mapGrid[originalx - 1][originaly] == 1:
                while randomNum == 3:
                    randomNum = random.randint(1, 4)
                if randomNum == 1:
                    if mapGrid[originalx][originaly + 1] == 1:
                        randomNum = random.choice([2, 4])
                        if randomNum == 2:
                            if mapGrid[originalx][originaly - 1] == 1:
                                randomNum = 4
                        if randomNum == 4:
                            if mapGrid[originalx + 1][originaly] == 1:
                                randomNum = 2

        if randomNum == 4:
            if mapGrid[originalx - 1][originaly] == 1:
                while randomNum == 4:
                    randomNum = random.randint(1, 4)
                if randomNum == 1:
                    if mapGrid[originalx][originaly + 1] == 1:
                        randomNum = random.choice([2, 3])
                        if randomNum == 2:
                            if mapGrid[originalx][originaly - 1] == 1:
                                randomNum = 3
                        if randomNum == 3:
                            if mapGrid[originalx - 1][originaly] == 1:
                                randomNum = 2
                if randomNum == 2:
                    if mapGrid[originalx][originaly - 1] == 1:
                        randomNum = random.choice([1, 3])
                        if randomNum == 1:
                            if mapGrid[originalx][originaly + 1] == 1:
                                randomNum = 3
                        if randomNum == 3:
                            if mapGrid[originalx - 1][originaly] == 1:
                                randomNum = 1
                if randomNum == 3:
                    if mapGrid[originalx][originaly - 1] == 1:
                        randomNum = random.choice([1, 2])
                        if randomNum == 1:
                            if mapGrid[originalx][originaly + 1] == 1:
                                randomNum = 2
                        if randomNum == 2:
                            if mapGrid[originalx][originaly - 1] == 1:
                                randomNum = 1

# DOOR GAPS
            elif col == 3:
                w = Wall(YELLOW, 10, 40, x + 30, y)
                all_sprites_list.add(w)
                wall_groupRight.add(w)
            elif col == 2:
                w = Wall(YELLOW, 10, 40, x, y)
                all_sprites_list.add(w)
                wall_groupLeft.add(w)
            elif col == 4:
                w = Wall(YELLOW, 40, 10, x, y)
                all_sprites_list.add(w)
                wall_groupUp.add(w)
            elif col == 5:
                w = Wall(YELLOW, 40, 10, x, y + 30)
                all_sprites_list.add(w)
                wall_groupDown.add(w)

 class doorClosed(pygame.sprite.Sprite):
    def __init__(self, colour, width, height, posx, posy):
        super().__init__()
        self.image = pygame.Surface([width, height])
        self.image.fill(colour)
        self.rect = self.image.get_rect()
        self.rect.x = posx
        self.rect.y = posy
    
     def delete():
        self.kill()

    player.rect.x = player_old_x
        player.rect.y = player_old_y

def mainMenu():
    menu = True
    screen.fill(BLACK)
    font = pygame.font.Font(None, 100)
    txt = font.render("[main menu]", True, WHITE)
    starttxt = font.render("[start]", True, BLACK)
    quittxt = font.render("[quit]", True, BLACK)
    buttonStart = pygame.Rect(100, 300, 450, 100)
    buttonQuit = pygame.Rect(100, 550, 450, 100)

    while menu is True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                menu = False
            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = event.pos
                if buttonStart.collidepoint(mouse_pos):
                    game()
                elif buttonQuit.collidepoint(mouse_pos):
                    menu = False

        keys = pygame.key.get_pressed()
        if keys[pygame.K_k]:
            menu = False
        
        pygame.draw.rect(screen, [255, 255, 255], buttonStart)
        pygame.draw.rect(screen, [255, 255, 255], buttonQuit)
        screen.blit(starttxt, (100, 310))
        screen.blit(quittxt, (100, 560))
        screen.blit(txt, (100, 100))
        pygame.display.flip()
        clock.tick(240)
